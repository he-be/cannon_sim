ControlPanelRenderer リファクタリング指示書
1. 目的
現在のControlPanelRendererは、UI要素のレイアウト計算、描画、イベントハンドリング、状態管理といった多くの責務を単一のクラスで担っており、非常に複雑化しています。特に、UI要素の座標が固定値で記述されているため、少しのデザイン変更がコード全体の大規模な修正を引き起こす原因となっています。

このリファクタリングの目的は、UIの構造とロジックを分離し、より宣言的でメンテナンス性の高いコードに改善することです。具体的には、レイアウトの自動化、UI要素のコンポーネント化を目指します。

2. 現状の主な問題点
レイアウトの硬直性:

setupUIElementsメソッド内や各renderメソッド内で、margin + 10やcurrentY += 20、y: currentY + 200のように、座標がマジックナンバーで直接指定されています。

これにより、要素の順序変更や新しい要素の追加が非常に困難で、表示崩れの原因となります。

責務の集中:

ControlPanelRendererクラスが、UIのレイアウト、描画、状態管理、イベント処理のすべてを担当しており、単一責任の原則に反しています。クラスが巨大で、コードの見通しが悪くなっています。

再利用性の欠如:

ボタンやスライダーといったUI要素が独立したコンポーネントとして定義されていません。そのため、描画ロジックやインタラクションのロジックが各所で重複しています。

3. リファクタリング方針
以下の3つの方針に沿ってリファクタリングを進めます。

方針1: UIコンポーネントシステムの導入
UIの各要素（テキスト、ボタン、スライダー、パネルなど）を、それぞれ独立したクラスとして定義します。これにより、UIの部品化と再利用を促進します。

UIComponent (基底クラス): すべてのUI要素が継承する抽象クラス。id, position, size, parent, childrenなどの基本的なプロパティと、render(ctx), handleEvent(event)といった共通のメソッドを定義します。

具象コンポーネント:

TextComponent: テキストを表示する。

ButtonComponent: クリック可能なボタン。onClickコールバックを持つ。

SliderComponent: 値を調整するスライダー。onChangeコールバックを持つ。

PanelComponent: 他のコンポーネントを内包するコンテナ。

方針2: レイアウト管理の自動化
絶対座標による配置をやめ、相対的なレイアウトシステムを導入します。これにより、コンポーネントのサイズや数に応じてレイアウトが自動的に計算されるようになります。

ContainerComponent (レイアウトコンポーネント):

VBox (Vertical Box): 子要素を縦方向に並べるコンテナ。padding（内側余白）やgap（要素間隔）を指定できるようにします。

HBox (Horizontal Box): 子要素を横方向に並べるコンテナ。

レイアウト計算ロジック:

親コンテナが、自身のサイズとレイアウト方針（VBoxやHBox）に基づいて、子コンポーネントの位置とサイズを再帰的に決定するcalculateLayout()メソッドを実装します。

方針3: 責務の分離
ControlPanelRendererの役割を、UIツリーの構築と外部との連携に限定し、具体的な描画やイベント処理は各コンポーネントに委譲します。

ControlPanelRenderer (改):

役割: UIコンポーネントツリーの構築、CanvasManagerの管理、外部からの状態更新の受付とUIへの反映。

render()メソッド: UIツリーのルートコンポーネントのrender()を呼び出すだけになります。

handleMouseEvent()メソッド: イベントが発生した座標から該当コンポーネントを特定し、そのコンポーネントのhandleEvent()を呼び出すように変更します。